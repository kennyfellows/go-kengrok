// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.28.2
// source: proto/proxy-manager.proto

package proxy_manager

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ProxyManager_StartProxy_FullMethodName = "/proxy_manager.ProxyManager/StartProxy"
	ProxyManager_EndProxy_FullMethodName   = "/proxy_manager.ProxyManager/EndProxy"
)

// ProxyManagerClient is the client API for ProxyManager service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ProxyManagerClient interface {
	StartProxy(ctx context.Context, in *StartProxyRequest, opts ...grpc.CallOption) (*StartProxyResponse, error)
	EndProxy(ctx context.Context, in *EndProxyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type proxyManagerClient struct {
	cc grpc.ClientConnInterface
}

func NewProxyManagerClient(cc grpc.ClientConnInterface) ProxyManagerClient {
	return &proxyManagerClient{cc}
}

func (c *proxyManagerClient) StartProxy(ctx context.Context, in *StartProxyRequest, opts ...grpc.CallOption) (*StartProxyResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StartProxyResponse)
	err := c.cc.Invoke(ctx, ProxyManager_StartProxy_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *proxyManagerClient) EndProxy(ctx context.Context, in *EndProxyRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, ProxyManager_EndProxy_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ProxyManagerServer is the server API for ProxyManager service.
// All implementations must embed UnimplementedProxyManagerServer
// for forward compatibility.
type ProxyManagerServer interface {
	StartProxy(context.Context, *StartProxyRequest) (*StartProxyResponse, error)
	EndProxy(context.Context, *EndProxyRequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedProxyManagerServer()
}

// UnimplementedProxyManagerServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedProxyManagerServer struct{}

func (UnimplementedProxyManagerServer) StartProxy(context.Context, *StartProxyRequest) (*StartProxyResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartProxy not implemented")
}
func (UnimplementedProxyManagerServer) EndProxy(context.Context, *EndProxyRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EndProxy not implemented")
}
func (UnimplementedProxyManagerServer) mustEmbedUnimplementedProxyManagerServer() {}
func (UnimplementedProxyManagerServer) testEmbeddedByValue()                      {}

// UnsafeProxyManagerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ProxyManagerServer will
// result in compilation errors.
type UnsafeProxyManagerServer interface {
	mustEmbedUnimplementedProxyManagerServer()
}

func RegisterProxyManagerServer(s grpc.ServiceRegistrar, srv ProxyManagerServer) {
	// If the following call pancis, it indicates UnimplementedProxyManagerServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ProxyManager_ServiceDesc, srv)
}

func _ProxyManager_StartProxy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartProxyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProxyManagerServer).StartProxy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProxyManager_StartProxy_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProxyManagerServer).StartProxy(ctx, req.(*StartProxyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ProxyManager_EndProxy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EndProxyRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ProxyManagerServer).EndProxy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ProxyManager_EndProxy_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ProxyManagerServer).EndProxy(ctx, req.(*EndProxyRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ProxyManager_ServiceDesc is the grpc.ServiceDesc for ProxyManager service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ProxyManager_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "proxy_manager.ProxyManager",
	HandlerType: (*ProxyManagerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "StartProxy",
			Handler:    _ProxyManager_StartProxy_Handler,
		},
		{
			MethodName: "EndProxy",
			Handler:    _ProxyManager_EndProxy_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/proxy-manager.proto",
}
