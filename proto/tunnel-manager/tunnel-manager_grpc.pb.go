// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v5.28.2
// source: proto/tunnel-manager.proto

package tunnel_manager

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TunnelManagerClient is the client API for TunnelManager service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TunnelManagerClient interface {
	CreateTunnel(ctx context.Context, in *CreateTunnelRequest, opts ...grpc.CallOption) (*CreateTunnelResponse, error)
}

type tunnelManagerClient struct {
	cc grpc.ClientConnInterface
}

func NewTunnelManagerClient(cc grpc.ClientConnInterface) TunnelManagerClient {
	return &tunnelManagerClient{cc}
}

func (c *tunnelManagerClient) CreateTunnel(ctx context.Context, in *CreateTunnelRequest, opts ...grpc.CallOption) (*CreateTunnelResponse, error) {
	out := new(CreateTunnelResponse)
	err := c.cc.Invoke(ctx, "/tunnel_manager.TunnelManager/CreateTunnel", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TunnelManagerServer is the server API for TunnelManager service.
// All implementations must embed UnimplementedTunnelManagerServer
// for forward compatibility
type TunnelManagerServer interface {
	CreateTunnel(context.Context, *CreateTunnelRequest) (*CreateTunnelResponse, error)
	mustEmbedUnimplementedTunnelManagerServer()
}

// UnimplementedTunnelManagerServer must be embedded to have forward compatible implementations.
type UnimplementedTunnelManagerServer struct {
}

func (UnimplementedTunnelManagerServer) CreateTunnel(context.Context, *CreateTunnelRequest) (*CreateTunnelResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateTunnel not implemented")
}
func (UnimplementedTunnelManagerServer) mustEmbedUnimplementedTunnelManagerServer() {}

// UnsafeTunnelManagerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TunnelManagerServer will
// result in compilation errors.
type UnsafeTunnelManagerServer interface {
	mustEmbedUnimplementedTunnelManagerServer()
}

func RegisterTunnelManagerServer(s grpc.ServiceRegistrar, srv TunnelManagerServer) {
	s.RegisterService(&TunnelManager_ServiceDesc, srv)
}

func _TunnelManager_CreateTunnel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateTunnelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TunnelManagerServer).CreateTunnel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/tunnel_manager.TunnelManager/CreateTunnel",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TunnelManagerServer).CreateTunnel(ctx, req.(*CreateTunnelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TunnelManager_ServiceDesc is the grpc.ServiceDesc for TunnelManager service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TunnelManager_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "tunnel_manager.TunnelManager",
	HandlerType: (*TunnelManagerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateTunnel",
			Handler:    _TunnelManager_CreateTunnel_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/tunnel-manager.proto",
}
