#!/bin/bash

LOCAL_PORT=$1
SUBDOMAIN=$2

# Configuration
REMOTE_HOST="10.0.0.187"
REMOTE_USER="kennyfellows"
REDIS_CONTAINER="kengrok-redis"
REDIS_KEY="kengrok-map:${SUBDOMAIN}"

# Function to find a random open port on remote server
find_open_port() {
  # Get random ports (we need two - one for tunnel, one for proxy)
  remote_ports=$(ssh $REMOTE_USER@$REMOTE_HOST 'comm -23 <(seq 10000 65535 | sort) <(ss -tan | awk "{print $4}" | cut -d":" -f2 | sort -u) | shuf | head -n 2')
  echo $remote_ports
}

# Function to cleanup when script exits
cleanup() {
  echo "Cleaning up..."
  # Remove port from Redis
  ssh $REMOTE_USER@$REMOTE_HOST "docker exec $REDIS_CONTAINER redis-cli DEL ${REDIS_KEY}" > /dev/null 2>&1
  # Kill SSH tunnel and socat
  ssh $REMOTE_USER@$REMOTE_HOST "pkill -f 'socat.*:${PROXY_PORT}'" > /dev/null 2>&1
  kill $TUNNEL_PID > /dev/null 2>&1
  exit 0
}

# Set up trap for cleanup
trap cleanup SIGINT SIGTERM

# Find two open ports
PORTS=($(find_open_port))
TUNNEL_PORT=${PORTS[0]}
PROXY_PORT=${PORTS[1]}

if [ -z "$TUNNEL_PORT" ] || [ -z "$PROXY_PORT" ]; then
  echo "Failed to find open ports"
  exit 1
fi

echo "Setting up tunnel for subdomain '${SUBDOMAIN}'"

# Start the SSH tunnel to localhost first
ssh -N -R localhost:$TUNNEL_PORT:localhost:$LOCAL_PORT $REMOTE_USER@$REMOTE_HOST &
TUNNEL_PID=$!

# Start socat on the remote host to forward from all interfaces to localhost
ssh $REMOTE_USER@$REMOTE_HOST "socat TCP-LISTEN:${PROXY_PORT},fork,reuseaddr TCP:localhost:${TUNNEL_PORT}" &
SOCAT_PID=$!

# Save the proxy port to Redis (this is the port that will be accessible from outside)
ssh $REMOTE_USER@$REMOTE_HOST "docker exec $REDIS_CONTAINER redis-cli SET ${REDIS_KEY} $PROXY_PORT"

echo "Tunnel established. Subdomain '${SUBDOMAIN}' mapped to port ${PROXY_PORT} in Redis."
echo "Press Ctrl+C to stop the tunnel..."

# Wait for the SSH tunnel process
wait $TUNNEL_PID
